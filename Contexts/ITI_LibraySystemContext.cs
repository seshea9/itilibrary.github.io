// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using ITI_Libraly_Api.Models;

namespace ITI_Libraly_Api.Contexts
{
    public partial class ITI_LibraySystemContext : DbContext
    {
        public ITI_LibraySystemContext()
        {
        }

        public ITI_LibraySystemContext(DbContextOptions<ITI_LibraySystemContext> options)
            : base(options)
        {
        }

        public virtual DbSet<TblBorrowDetails> TblBorrowDetails { get; set; }
        public virtual DbSet<TblItiBook> TblItiBook { get; set; }
        public virtual DbSet<TblItiBookdetails> TblItiBookdetails { get; set; }
        public virtual DbSet<TblItiBorrow> TblItiBorrow { get; set; }
        public virtual DbSet<TblItiCategory> TblItiCategory { get; set; }
        public virtual DbSet<TblItiEmployee> TblItiEmployee { get; set; }
        public virtual DbSet<TblItiImport> TblItiImport { get; set; }
        public virtual DbSet<TblItiImportDetails> TblItiImportDetails { get; set; }
        public virtual DbSet<TblItiLocation> TblItiLocation { get; set; }
        public virtual DbSet<TblItiPosition> TblItiPosition { get; set; }
        public virtual DbSet<TblItiRead> TblItiRead { get; set; }
        public virtual DbSet<TblItiReadDetails> TblItiReadDetails { get; set; }
        public virtual DbSet<TblItiReturn> TblItiReturn { get; set; }
        public virtual DbSet<TblItiReturnReadDetails> TblItiReturnReadDetails { get; set; }
        public virtual DbSet<TblItiReturndeltails> TblItiReturndeltails { get; set; }
        public virtual DbSet<TblItiStatus> TblItiStatus { get; set; }
        public virtual DbSet<TblItiStudent> TblItiStudent { get; set; }
        public virtual DbSet<TblItiSupplyer> TblItiSupplyer { get; set; }
        public virtual DbSet<TblItiUser> TblItiUser { get; set; }
        public virtual DbSet<TblNational> TblNational { get; set; }
        public virtual DbSet<TblReturnRead> TblReturnRead { get; set; }
        public virtual DbSet<TblTimeType> TblTimeType { get; set; }
        public virtual DbSet<TblUseLogintime> TblUseLogintime { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TblBorrowDetails>(entity =>
            {
                entity.HasKey(e => e.BorDelId);

                entity.ToTable("tbl_borrow_details");

                entity.Property(e => e.BorDelId).HasColumnName("bor_del_id");

                entity.Property(e => e.BookDelId)
                    .HasMaxLength(7)
                    .IsUnicode(false)
                    .HasColumnName("book_del_id")
                    .IsFixedLength();

                entity.Property(e => e.BorId).HasColumnName("bor_id");

                entity.Property(e => e.StatusId).HasColumnName("status_id");

                entity.HasOne(d => d.BookDel)
                    .WithMany(p => p.TblBorrowDetails)
                    .HasForeignKey(d => d.BookDelId)
                    .HasConstraintName("FK_tbl_borrow_details_tbl_iti_bookdetails");

                entity.HasOne(d => d.Bor)
                    .WithMany(p => p.TblBorrowDetails)
                    .HasForeignKey(d => d.BorId)
                    .HasConstraintName("FK_tbl_borrow_details_tbl_iti_borrow");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.TblBorrowDetails)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("FK_tbl_borrow_details_tbl_iti_status");
            });

            modelBuilder.Entity<TblItiBook>(entity =>
            {
                entity.HasKey(e => e.BookId);

                entity.ToTable("tbl_iti_book");

                entity.Property(e => e.BookId).HasColumnName("book_id");

                entity.Property(e => e.BookAuthor)
                    .HasMaxLength(300)
                    .HasColumnName("book_author")
                    .UseCollation("Croatian_BIN");

                entity.Property(e => e.BookDescription)
                    .HasMaxLength(500)
                    .HasColumnName("book_description")
                    .UseCollation("Croatian_BIN");

                entity.Property(e => e.BookNameEn)
                    .HasMaxLength(300)
                    .HasColumnName("book_name_en")
                    .UseCollation("Croatian_BIN");

                entity.Property(e => e.BookNameKh)
                    .HasMaxLength(300)
                    .HasColumnName("book_name_kh")
                    .UseCollation("Croatian_BIN");

                entity.Property(e => e.BookQty).HasColumnName("book_qty");

                entity.Property(e => e.BookYear)
                    .HasColumnType("date")
                    .HasColumnName("book_year");

                entity.Property(e => e.CateId).HasColumnName("cate_id");

                entity.Property(e => e.FilePath).HasColumnName("file_path");

                entity.Property(e => e.LocId)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("loc_id")
                    .IsFixedLength();

                entity.HasOne(d => d.Cate)
                    .WithMany(p => p.TblItiBook)
                    .HasForeignKey(d => d.CateId)
                    .HasConstraintName("FK_tbl_iti_book_tbl_iti_category");

                entity.HasOne(d => d.Loc)
                    .WithMany(p => p.TblItiBook)
                    .HasForeignKey(d => d.LocId)
                    .HasConstraintName("FK_tbl_iti_book_tbl_iti_location");
            });

            modelBuilder.Entity<TblItiBookdetails>(entity =>
            {
                entity.HasKey(e => e.BookDelId);

                entity.ToTable("tbl_iti_bookdetails");

                entity.Property(e => e.BookDelId)
                    .HasMaxLength(7)
                    .IsUnicode(false)
                    .HasColumnName("book_del_id")
                    .IsFixedLength();

                entity.Property(e => e.BookDelLabel)
                    .HasMaxLength(300)
                    .HasColumnName("book_del_label");

                entity.Property(e => e.BookId).HasColumnName("book_id");

                entity.Property(e => e.ImpId).HasColumnName("imp_id");

                entity.Property(e => e.StatusId).HasColumnName("status_id");

                entity.HasOne(d => d.Book)
                    .WithMany(p => p.TblItiBookdetails)
                    .HasForeignKey(d => d.BookId)
                    .HasConstraintName("FK_tbl_iti_bookdetails_tbl_iti_book");

                entity.HasOne(d => d.Imp)
                    .WithMany(p => p.TblItiBookdetails)
                    .HasForeignKey(d => d.ImpId)
                    .HasConstraintName("FK_tbl_iti_bookdetails_tbl_iti_import");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.TblItiBookdetails)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("FK_tbl_iti_bookdetails_tbl_iti_status");
            });

            modelBuilder.Entity<TblItiBorrow>(entity =>
            {
                entity.HasKey(e => e.BorId);

                entity.ToTable("tbl_iti_borrow");

                entity.Property(e => e.BorId).HasColumnName("bor_id");

                entity.Property(e => e.BorCode)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("bor_code")
                    .IsFixedLength();

                entity.Property(e => e.BorEndDate)
                    .HasColumnType("date")
                    .HasColumnName("bor_end_date");

                entity.Property(e => e.BorStartDate)
                    .HasColumnType("date")
                    .HasColumnName("bor_start_date");

                entity.Property(e => e.IsRequired).HasColumnName("is_required");

                entity.Property(e => e.StuId).HasColumnName("stu_id");

                entity.Property(e => e.UseDelId).HasColumnName("use_del_id");

                entity.Property(e => e.UseEditDate)
                    .HasColumnType("datetime")
                    .HasColumnName("use_edit_date");

                entity.HasOne(d => d.Stu)
                    .WithMany(p => p.TblItiBorrow)
                    .HasForeignKey(d => d.StuId)
                    .HasConstraintName("FK_tbl_iti_borrow_tbl_iti_student");

                entity.HasOne(d => d.UseDel)
                    .WithMany(p => p.TblItiBorrow)
                    .HasForeignKey(d => d.UseDelId)
                    .HasConstraintName("FK_tbl_iti_borrow_tbl_use_logintime");
            });

            modelBuilder.Entity<TblItiCategory>(entity =>
            {
                entity.HasKey(e => e.CateId);

                entity.ToTable("tbl_iti_category");

                entity.Property(e => e.CateId).HasColumnName("cate_id");

                entity.Property(e => e.CateNameEn)
                    .HasMaxLength(200)
                    .HasColumnName("cate_name_en")
                    .UseCollation("Croatian_BIN");

                entity.Property(e => e.CateNameKh)
                    .HasMaxLength(200)
                    .HasColumnName("cate_name_kh")
                    .UseCollation("Croatian_BIN");
            });

            modelBuilder.Entity<TblItiEmployee>(entity =>
            {
                entity.HasKey(e => e.EmpId)
                    .HasName("PK_tbl_ITI_employee");

                entity.ToTable("tbl_iti_employee");

                entity.Property(e => e.EmpId).HasColumnName("emp_id");

                entity.Property(e => e.EmpAddress)
                    .HasMaxLength(500)
                    .HasColumnName("emp_address")
                    .UseCollation("Croatian_BIN");

                entity.Property(e => e.EmpAtive).HasColumnName("emp_ative");

                entity.Property(e => e.EmpDateIn)
                    .HasColumnType("date")
                    .HasColumnName("emp_date_in");

                entity.Property(e => e.EmpDateOut)
                    .HasColumnType("date")
                    .HasColumnName("emp_date_out");

                entity.Property(e => e.EmpDob)
                    .HasColumnType("date")
                    .HasColumnName("emp_dob");

                entity.Property(e => e.EmpNameEn)
                    .HasMaxLength(300)
                    .HasColumnName("emp_name_en")
                    .UseCollation("Croatian_BIN");

                entity.Property(e => e.EmpNameKh)
                    .HasMaxLength(300)
                    .HasColumnName("emp_name_kh")
                    .UseCollation("Croatian_BIN");

                entity.Property(e => e.EmpNoteId)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("emp_note_id")
                    .IsFixedLength();

                entity.Property(e => e.EmpPhone)
                    .HasMaxLength(50)
                    .HasColumnName("emp_phone");

                entity.Property(e => e.EmpSex)
                    .HasMaxLength(300)
                    .HasColumnName("emp_sex")
                    .UseCollation("Croatian_BIN");

                entity.Property(e => e.EmpWorkId)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("emp_work_id")
                    .IsFixedLength();

                entity.Property(e => e.FilePath).HasColumnName("file_path");

                entity.Property(e => e.NationalId).HasColumnName("national_id");

                entity.Property(e => e.PosId).HasColumnName("pos_id");

                entity.HasOne(d => d.Pos)
                    .WithMany(p => p.TblItiEmployee)
                    .HasForeignKey(d => d.PosId)
                    .HasConstraintName("FK_tbl_iti_employee_tbl_iti_position");
            });

            modelBuilder.Entity<TblItiImport>(entity =>
            {
                entity.HasKey(e => e.ImpId);

                entity.ToTable("tbl_iti_import");

                entity.Property(e => e.ImpId).HasColumnName("imp_id");

                entity.Property(e => e.ImpDate)
                    .HasColumnType("datetime")
                    .HasColumnName("imp_date");

                entity.Property(e => e.SupId).HasColumnName("sup_id");

                entity.Property(e => e.UseDelId).HasColumnName("use_del_id");

                entity.Property(e => e.UseEditDate)
                    .HasColumnType("datetime")
                    .HasColumnName("use_edit_date");

                entity.HasOne(d => d.Sup)
                    .WithMany(p => p.TblItiImport)
                    .HasForeignKey(d => d.SupId)
                    .HasConstraintName("FK_tbl_iti_import_tbl_iti_supplyer");

                entity.HasOne(d => d.UseDel)
                    .WithMany(p => p.TblItiImport)
                    .HasForeignKey(d => d.UseDelId)
                    .HasConstraintName("FK_tbl_iti_import_tbl_use_logintime");
            });

            modelBuilder.Entity<TblItiImportDetails>(entity =>
            {
                entity.HasKey(e => e.ImpDelId);

                entity.ToTable("tbl_iti_import_details");

                entity.Property(e => e.ImpDelId).HasColumnName("imp_del_id");

                entity.Property(e => e.BookId).HasColumnName("book_id");

                entity.Property(e => e.ImpId).HasColumnName("imp_id");

                entity.Property(e => e.ImpPrice).HasColumnName("imp_price");

                entity.Property(e => e.ImpQty).HasColumnName("imp_qty");

                entity.HasOne(d => d.Book)
                    .WithMany(p => p.TblItiImportDetails)
                    .HasForeignKey(d => d.BookId)
                    .HasConstraintName("FK_tbl_iti_import_details_tbl_iti_book");

                entity.HasOne(d => d.Imp)
                    .WithMany(p => p.TblItiImportDetails)
                    .HasForeignKey(d => d.ImpId)
                    .HasConstraintName("FK_tbl_iti_import_details_tbl_iti_import1");
            });

            modelBuilder.Entity<TblItiLocation>(entity =>
            {
                entity.HasKey(e => e.LocId);

                entity.ToTable("tbl_iti_location");

                entity.Property(e => e.LocId)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("loc_id")
                    .IsFixedLength();

                entity.Property(e => e.LocActive).HasColumnName("loc_active");

                entity.Property(e => e.LocLabel)
                    .HasMaxLength(300)
                    .HasColumnName("loc_label")
                    .UseCollation("Croatian_BIN");
            });

            modelBuilder.Entity<TblItiPosition>(entity =>
            {
                entity.HasKey(e => e.PosId);

                entity.ToTable("tbl_iti_position");

                entity.Property(e => e.PosId).HasColumnName("pos_id");

                entity.Property(e => e.PosNameEn)
                    .HasMaxLength(200)
                    .HasColumnName("pos_name_en")
                    .UseCollation("Croatian_BIN");

                entity.Property(e => e.PosNameKh)
                    .HasMaxLength(200)
                    .HasColumnName("pos_name_kh")
                    .UseCollation("Croatian_BIN");
            });

            modelBuilder.Entity<TblItiRead>(entity =>
            {
                entity.HasKey(e => e.ReadId);

                entity.ToTable("tbl_iti_read");

                entity.Property(e => e.ReadId).HasColumnName("read_id");

                entity.Property(e => e.EndTime)
                    .HasMaxLength(10)
                    .HasColumnName("end_time")
                    .IsFixedLength();

                entity.Property(e => e.IsReturn).HasColumnName("is_return");

                entity.Property(e => e.ReadDate)
                    .HasColumnType("date")
                    .HasColumnName("read_date");

                entity.Property(e => e.StartTime)
                    .HasMaxLength(10)
                    .HasColumnName("start_time")
                    .IsFixedLength();

                entity.Property(e => e.StatusId).HasColumnName("status_id");

                entity.Property(e => e.StuId).HasColumnName("stu_id");

                entity.Property(e => e.TimeTypeId).HasColumnName("time_type_id");

                entity.Property(e => e.UseDelId).HasColumnName("use_del_id");

                entity.Property(e => e.UseEditDate)
                    .HasColumnType("datetime")
                    .HasColumnName("use_edit_date");

                entity.HasOne(d => d.TimeType)
                    .WithMany(p => p.TblItiRead)
                    .HasForeignKey(d => d.TimeTypeId)
                    .HasConstraintName("FK_tbl_iti_read_tbl_time_type");

                entity.HasOne(d => d.UseDel)
                    .WithMany(p => p.TblItiRead)
                    .HasForeignKey(d => d.UseDelId)
                    .HasConstraintName("FK_tbl_iti_read_tbl_use_logintime");
            });

            modelBuilder.Entity<TblItiReadDetails>(entity =>
            {
                entity.HasKey(e => e.ReadDelId);

                entity.ToTable("tbl_iti_read_details");

                entity.Property(e => e.ReadDelId).HasColumnName("read_del_id");

                entity.Property(e => e.BookDelId)
                    .HasMaxLength(7)
                    .IsUnicode(false)
                    .HasColumnName("book_del_id")
                    .IsFixedLength();

                entity.Property(e => e.ReadId).HasColumnName("read_id");

                entity.Property(e => e.StatusId).HasColumnName("status_id");

                entity.HasOne(d => d.BookDel)
                    .WithMany(p => p.TblItiReadDetails)
                    .HasForeignKey(d => d.BookDelId)
                    .HasConstraintName("FK_tbl_iti_read_details_tbl_iti_bookdetails");

                entity.HasOne(d => d.Read)
                    .WithMany(p => p.TblItiReadDetails)
                    .HasForeignKey(d => d.ReadId)
                    .HasConstraintName("FK_tbl_iti_read_details_tbl_iti_read");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.TblItiReadDetails)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("FK_tbl_iti_read_details_tbl_iti_status");
            });

            modelBuilder.Entity<TblItiReturn>(entity =>
            {
                entity.HasKey(e => e.RetId);

                entity.ToTable("tbl_iti_return");

                entity.Property(e => e.RetId).HasColumnName("ret_id");

                entity.Property(e => e.RetDate)
                    .HasColumnType("date")
                    .HasColumnName("ret_date");

                entity.Property(e => e.UseDelId).HasColumnName("use_del_id");

                entity.Property(e => e.UseEditDate)
                    .HasColumnType("datetime")
                    .HasColumnName("use_edit_date");

                entity.HasOne(d => d.UseDel)
                    .WithMany(p => p.TblItiReturn)
                    .HasForeignKey(d => d.UseDelId)
                    .HasConstraintName("FK_tbl_iti_return_tbl_use_logintime");
            });

            modelBuilder.Entity<TblItiReturnReadDetails>(entity =>
            {
                entity.HasKey(e => e.RetDelReadId);

                entity.ToTable("tbl_iti_return_read_details");

                entity.Property(e => e.RetDelReadId).HasColumnName("ret_del_read_id");

                entity.Property(e => e.ReadDelId).HasColumnName("read_del_id");

                entity.Property(e => e.RetReadId).HasColumnName("ret_read_id");

                entity.Property(e => e.StatusId).HasColumnName("status_id");

                entity.HasOne(d => d.ReadDel)
                    .WithMany(p => p.TblItiReturnReadDetails)
                    .HasForeignKey(d => d.ReadDelId)
                    .HasConstraintName("FK_tbl_iti_return_read_details_tbl_iti_read_details");

                entity.HasOne(d => d.RetRead)
                    .WithMany(p => p.TblItiReturnReadDetails)
                    .HasForeignKey(d => d.RetReadId)
                    .HasConstraintName("FK_tbl_iti_return_read_details_tbl_return_read");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.TblItiReturnReadDetails)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("FK_tbl_iti_return_read_details_tbl_iti_status");
            });

            modelBuilder.Entity<TblItiReturndeltails>(entity =>
            {
                entity.HasKey(e => e.RetDelId);

                entity.ToTable("tbl_iti_returndeltails");

                entity.Property(e => e.RetDelId).HasColumnName("ret_del_id");

                entity.Property(e => e.BorId).HasColumnName("bor_id");

                entity.Property(e => e.RetId).HasColumnName("ret_id");

                entity.Property(e => e.StatusId).HasColumnName("status_id");

                entity.HasOne(d => d.Bor)
                    .WithMany(p => p.TblItiReturndeltails)
                    .HasForeignKey(d => d.BorId)
                    .HasConstraintName("FK_tbl_iti_returndeltails_tbl_iti_borrow");

                entity.HasOne(d => d.Ret)
                    .WithMany(p => p.TblItiReturndeltails)
                    .HasForeignKey(d => d.RetId)
                    .HasConstraintName("FK_tbl_iti_returndeltails_tbl_iti_return");
            });

            modelBuilder.Entity<TblItiStatus>(entity =>
            {
                entity.HasKey(e => e.StatusId);

                entity.ToTable("tbl_iti_status");

                entity.Property(e => e.StatusId).HasColumnName("status_id");

                entity.Property(e => e.StatusName)
                    .HasMaxLength(100)
                    .HasColumnName("status_name")
                    .UseCollation("Croatian_BIN");
            });

            modelBuilder.Entity<TblItiStudent>(entity =>
            {
                entity.HasKey(e => e.StuId);

                entity.ToTable("tbl_iti_student");

                entity.Property(e => e.StuId).HasColumnName("stu_id");

                entity.Property(e => e.IsPrintCart).HasColumnName("is_print_cart");

                entity.Property(e => e.NattionalId).HasColumnName("nattional_id");

                entity.Property(e => e.PosId).HasColumnName("pos_id");

                entity.Property(e => e.StuAddress)
                    .HasMaxLength(300)
                    .HasColumnName("stu_address")
                    .UseCollation("Croatian_BIN");

                entity.Property(e => e.StuCode)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("stu_code")
                    .IsFixedLength();

                entity.Property(e => e.StuDob)
                    .HasColumnType("date")
                    .HasColumnName("stu_dob");

                entity.Property(e => e.StuName)
                    .HasMaxLength(300)
                    .HasColumnName("stu_name")
                    .UseCollation("Croatian_BIN");

                entity.Property(e => e.StuPhone)
                    .HasMaxLength(50)
                    .HasColumnName("stu_phone")
                    .IsFixedLength();

                entity.Property(e => e.StuSex)
                    .HasMaxLength(50)
                    .HasColumnName("stu_sex")
                    .UseCollation("Croatian_BIN");

                entity.HasOne(d => d.Pos)
                    .WithMany(p => p.TblItiStudent)
                    .HasForeignKey(d => d.PosId)
                    .HasConstraintName("FK_tbl_iti_student_tbl_iti_position");
            });

            modelBuilder.Entity<TblItiSupplyer>(entity =>
            {
                entity.HasKey(e => e.SupId);

                entity.ToTable("tbl_iti_supplyer");

                entity.Property(e => e.SupId).HasColumnName("sup_id");

                entity.Property(e => e.SupAddress)
                    .HasMaxLength(500)
                    .HasColumnName("sup_address")
                    .UseCollation("Croatian_BIN");

                entity.Property(e => e.SupName)
                    .HasMaxLength(400)
                    .HasColumnName("sup_name")
                    .UseCollation("Croatian_BIN");

                entity.Property(e => e.SupPhone)
                    .HasMaxLength(100)
                    .HasColumnName("sup_phone");
            });

            modelBuilder.Entity<TblItiUser>(entity =>
            {
                entity.HasKey(e => e.UseId);

                entity.ToTable("tbl_iti_user");

                entity.Property(e => e.UseId).HasColumnName("use_id");

                entity.Property(e => e.EmpId).HasColumnName("emp_id");

                entity.Property(e => e.UseCreateDate)
                    .HasColumnType("date")
                    .HasColumnName("use_create_date");

                entity.Property(e => e.UseName)
                    .HasMaxLength(300)
                    .HasColumnName("use_name")
                    .UseCollation("Croatian_BIN");

                entity.Property(e => e.UsePasswords)
                    .HasMaxLength(50)
                    .HasColumnName("use_passwords");

                entity.Property(e => e.UseType)
                    .HasMaxLength(50)
                    .HasColumnName("use_type")
                    .UseCollation("Croatian_BIN");

                entity.HasOne(d => d.Emp)
                    .WithMany(p => p.TblItiUser)
                    .HasForeignKey(d => d.EmpId)
                    .HasConstraintName("FK_tbl_iti_user_tbl_iti_employee");
            });

            modelBuilder.Entity<TblNational>(entity =>
            {
                entity.ToTable("tbl_national");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Active).HasColumnName("active");

                entity.Property(e => e.Description)
                    .HasMaxLength(300)
                    .HasColumnName("description");

                entity.Property(e => e.NameEn)
                    .HasMaxLength(300)
                    .HasColumnName("name_en");

                entity.Property(e => e.NameKh)
                    .HasMaxLength(300)
                    .HasColumnName("name_kh")
                    .UseCollation("Croatian_BIN");

                entity.Property(e => e.Sort)
                    .HasMaxLength(300)
                    .HasColumnName("sort");
            });

            modelBuilder.Entity<TblReturnRead>(entity =>
            {
                entity.HasKey(e => e.RetReadId);

                entity.ToTable("tbl_return_read");

                entity.Property(e => e.RetReadId).HasColumnName("ret_read_id");

                entity.Property(e => e.RetReadDate)
                    .HasColumnType("date")
                    .HasColumnName("ret_read_date");

                entity.Property(e => e.UseDelId).HasColumnName("use_del_id");

                entity.Property(e => e.UseEditDate)
                    .HasColumnType("datetime")
                    .HasColumnName("use_edit_date");

                entity.HasOne(d => d.UseDel)
                    .WithMany(p => p.TblReturnRead)
                    .HasForeignKey(d => d.UseDelId)
                    .HasConstraintName("FK_tbl_return_read_tbl_use_logintime");
            });

            modelBuilder.Entity<TblTimeType>(entity =>
            {
                entity.HasKey(e => e.TimeTypeId);

                entity.ToTable("tbl_time_type");

                entity.Property(e => e.TimeTypeId).HasColumnName("time_type_id");

                entity.Property(e => e.TimeType)
                    .HasMaxLength(100)
                    .HasColumnName("time_type");
            });

            modelBuilder.Entity<TblUseLogintime>(entity =>
            {
                entity.HasKey(e => e.UseDelId);

                entity.ToTable("tbl_use_logintime");

                entity.Property(e => e.UseDelId).HasColumnName("use_del_id");

                entity.Property(e => e.UseId).HasColumnName("use_id");

                entity.Property(e => e.UseLoginDate)
                    .HasColumnType("datetime")
                    .HasColumnName("use_login_date");

                entity.HasOne(d => d.Use)
                    .WithMany(p => p.TblUseLogintime)
                    .HasForeignKey(d => d.UseId)
                    .HasConstraintName("FK_tbl_use_logintime_tbl_iti_user");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}